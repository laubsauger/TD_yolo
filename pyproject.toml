[build-system]
requires = [
    "setuptools>=63.0", 
    "wheel>=0.40",
    "cython~=3.0.0",
    "numpy>=1.20.0"
]
build-backend = "setuptools.build_meta"

[tool.isort]
skip = ["setup.py"]
profile = "black"
line_length = 120

[tool.pyright]
# TouchDesigner specific configuration
pythonVersion = "3.11"
typeCheckingMode = "basic"
useLibraryCodeForTypes = true

# Add TouchDesigner paths
extraPaths = [
    "nodes_TD",
    "/Applications/TouchDesigner.app/Contents/Frameworks/Python.framework/Versions/Current/Lib/tdi"
]

# Ignore TouchDesigner runtime globals
reportUndefinedVariable = false
reportMissingImports = "warning"
reportGeneralTypeIssues = "warning"
reportUnreachable = false

[tool.pylint.messages_control]
# Disable specific warnings
disable = [
    "undefined-variable",  # TD globals
    "import-error",        # TD modules
    "no-member",          # Dynamic TD attributes
]

[tool.pylint.basic]
# Add TouchDesigner globals
additional-builtins = ["op", "me", "parent", "ipar", "iop"]

[project.urls]
"Homepage" = "https://github.com/laubsauger/TD_Yolo"
"Bug Tracker" = "https://github.com/laubsauger/TD_Yolo/issues"
"Documentation" = "https://github.com/laubsauger/TD_Yolo#readme"
"Changelog" = "https://github.com/laubsauger/TD_Yolo/blob/main/CHANGELOG.md"

[project]
name = "TD_Yolo"
readme = {file = "README.md", content-type = "text/markdown"}
authors = [
    { name = "laubsauger" },
    { name = "medvednikov-dn" },
    { name = "kernelA" }
]
maintainers = [{ name = "laubsauger" }]
description = "High-performance YOLO integration for TouchDesigner with real-time object detection and pose estimation"
keywords = ["yolo", "touchdesigner", "object-detection", "pose-estimation", "real-time", "computer-vision", "yolo11"]
requires-python = ">=3.9"
dynamic = ["dependencies", "optional-dependencies", "version"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Environment :: GPU :: NVIDIA CUDA",
    "Programming Language :: Cython"
]


[tool.semantic_release]
assets = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "tag"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"
version_variables = ["yolo_models/__init__.py:__version__"]

[tool.semantic_release.branches.main]
match = "develop"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tag = ":minor:"
patch_tag = ":patch:"

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = false


[tool.cibuildwheel]
test-requires = "pytest"
test-command = "pytest {project}/tests"
before-test = "pip install -r ./requirements.inference.txt -r ./requirements.torch.cpu.txt"
build = "cp39-*"
skip = ["*-win32", "*-manylinux_i686", "pp*", '*_arm64',  "*-musllinux_*"]